<main style="min-height: 100vh">
    <r-grid columns="8">
        <r-cell span="3-8" span-s="row">
        <!-- Breadcrumbs -->
            <div style="display: flex; align-items: center; flex-wrap: wrap; margin-bottom: 1.2rem;">
                <a style="display:flex" href="{{$.browseEndpoint}}">{{template "icon-folder"}}</a> <span class="breadcrumb-delimiter">/</span>
                {{range .breadCrumbs}}
                    <a
                    href="{{if .IsNotebook }}{{$.notebookEndpoint}}{{else}}{{$.browseEndpoint}}{{end}}{{.Path}}"
                    >{{.Name}}</a> {{if .IsFolder}}<span class="breadcrumb-delimiter">/</span>{{end}}
                {{end}}
                <span id="dirty-indicator" style="color: #666; font-size: 0.7em; margin-left: 1em"></span>
            </div>
        </r-cell>
    </r-grid>
    <div id="notebook-mount"></div>
    <hr style="margin-bottom: 0;">
    <details>
        <summary><span style="font-weight: 700; font-size: 0.8em; color: #333" >Current notebook content</span></summary>
        <pre id="notebook-content-display" style="background-color: #eee; padding: 1em;"></pre>
    </details>
</main>

{{template "footer"}}

<script type="module">
    import {StarboardNotebookIFrame} from "/static/vendor/starboard-wrap@0.2.3/dist/index.js"
    const initialNotebookContent = {{.notebookContent}};

    let currentNotebookContent;
    let lastSavedNotebookContentString = initialNotebookContent;
    let dirtyIndicator = document.querySelector("#dirty-indicator");
    let contentDisplay = document.querySelector("#notebook-content-display");

    function updateContent(content) {
        currentNotebookContent = content;
        contentDisplay.innerText = currentNotebookContent;
        const isDirty = lastSavedNotebookContentString != currentNotebookContent;
        updateDirtyIndicators(isDirty);
    }
    updateContent(initialNotebookContent);

    function updateDirtyIndicators(dirty) {

        if (dirty && !document.title.startsWith("* ")) {
            document.title = "* " + document.title;
            dirtyIndicator.innerText = " Unsaved changes";
        } else if (!dirty && document.title.startsWith("* ")) {
            document.title = document.title.substr(2);
            dirtyIndicator.innerText = "";
        }
    }  

    async function save(content) {
        const r = await fetch(window.location.pathname, {
            method: "PUT",
            body: content,
            headers: {
                'Content-Type': 'text/plain; charset=UTF-8',
            },
        });
        if (!r.ok) {
            alert("Failed to save, open your console");
            return;
        }
        lastSavedNotebookContentString = content;
        updateDirtyIndicators(false);
    }

    const mount = document.querySelector("#notebook-mount");
    const el = new StarboardNotebookIFrame({
        notebookContent: currentNotebookContent,
        src: "{{.iframeHost}}/static/vendor/starboard-notebook@0.8.13/dist/index.html",
        onSaveMessage(payload) {
            updateContent(payload.content);
            save(payload.content); // Implement your own save function..
        },
        onContentUpdateMessage(payload) {
            updateContent(payload.content);
        },

    });
    el.style.width = "100%";
    mount.appendChild(el);
</script>